<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>JavaScript - Tag - Lingyun Yang Tech Blog</title>
        <link>https://yangyangsimons.github.io/tags/javascript/</link>
        <description>JavaScript - Tag - Lingyun Yang Tech Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>lingyunyanglyy@gmail.com (Lingyun Yang)</managingEditor>
            <webMaster>lingyunyanglyy@gmail.com (Lingyun Yang)</webMaster><lastBuildDate>Tue, 11 Jul 2023 00:51:41 &#43;0800</lastBuildDate><atom:link href="https://yangyangsimons.github.io/tags/javascript/" rel="self" type="application/rss+xml" /><item>
    <title>Basic usage of Redux Toolkit </title>
    <link>https://yangyangsimons.github.io/posts/fe-react-rtk/</link>
    <pubDate>Tue, 11 Jul 2023 00:51:41 &#43;0800</pubDate>
    <author>Lingyun Yang</author>
    <guid>https://yangyangsimons.github.io/posts/fe-react-rtk/</guid>
    <description><![CDATA[Installation. I use npm to install RTK and react-redux. npm install @reduxjs/toolkit react-redux
1. Start with createSlice(). The example provide on the Rredux Toolkit official website is a little bit bizarre, as it started by configuring the store and providing the store to the App component. However, if we are gonna build an application from scratch, the first thing we do is createSlice() as it helps us to set up the slice of state, action creators, action types, and reducers in Redux.]]></description>
</item>
<item>
    <title>React useReducer Hook</title>
    <link>https://yangyangsimons.github.io/posts/fe-react-usereducer/</link>
    <pubDate>Thu, 22 Jun 2023 22:28:49 &#43;0100</pubDate>
    <author>Lingyun Yang</author>
    <guid>https://yangyangsimons.github.io/posts/fe-react-usereducer/</guid>
    <description><![CDATA[Introduction useReducer() is used for state management in React components, providing a more predictable state transition by accepting a state and action in the reducer function.
Why use useReducer()? useState() is usually the go-to Hook for state management in React. However, for complex state logic involving multiple sub-values or when the next state depends on the previous one, useReducer() might be a more suitable choice. It can also be beneficial when working with global state or when performance optimization is needed.]]></description>
</item>
<item>
    <title>Equality comparison in JavaScript:(==)&amp;(===)</title>
    <link>https://yangyangsimons.github.io/posts/fe-equality_comparasion/</link>
    <pubDate>Mon, 30 Jan 2023 00:04:04 &#43;0800</pubDate>
    <author>Lingyun Yang</author>
    <guid>https://yangyangsimons.github.io/posts/fe-equality_comparasion/</guid>
    <description><![CDATA[Overall, JavaScript have three differenct value-comparison operations: == &mdash; loose equality; === &mdash; strict equality; Object.is() very uncommon usage. Let&rsquo;s look at the difference between these three operations: === will compare two things without type conversion. which means the first step is check the type of two things.
If typeof(x) is not typeof(y) then return false If x, y are Number then compare the value of those two number. Special case: NaN === NaN -&gt; return false, +0 === -0-&gt; return true, null === undefined -&gt; return false.]]></description>
</item>
</channel>
</rss>
